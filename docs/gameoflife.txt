-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simulation of Conway's Game of Life
--   
--   Simulation of Conway's Game of Life
@package gameoflife
@version 0.1.0.0


-- | Simulating <i>Conway's Game of Life</i> on a bounded board.
--   
--   <pre>
--   -- Get 15 generations from a 30x80 random world using 5 as seed:
--   gens = take 15 . iterate . generation $ mkRandWorld (mkStdGen 5) 30 80
--   -- Print each generation:
--   mapM_ putStrLn . map showWorld $ gens
--   </pre>
module Life

-- | The state of a cell.
data Life
Dead :: Life
Alive :: Life

-- | World grid
type World = Map Coord Life

-- | Coordinates
type Coord = (Height, Width)
type Height = Int
type Width = Int

-- | Get the immediate neighbourhood of a cell (radius=1).
neighbourhood :: Coord -> World -> World

-- | <tt>neighbours p life</tt> Count the number of cells within the
--   neighbourhood whose state match <tt>life</tt>.
neighbours :: Coord -> Life -> World -> Int

-- | <tt>mkWorldFrom v w h</tt> generates a <tt>w * h</tt> sized world grid
--   with cell values from <tt>v</tt>. The values are repeated for all
--   cells if the length of <tt>v</tt> is less than <tt>w * h</tt>.
mkWorldFrom :: [Life] -> Height -> Width -> World

-- | Create a blank world with dead cells. Same as <tt>mkWorldFrom
--   [Dead]</tt>.
mkBlankWorld :: Height -> Width -> World

-- | Create an overpopulated world. Same as <tt>mkWorldFrom [Alive]</tt>.
mkOverWorld :: Height -> Width -> World

-- | Create a randomly populated world using the provided random generator.
mkRandWorld :: StdGen -> Height -> Width -> World

-- | <tt>generation w</tt> determines the next generation of a world
--   <tt>w</tt> using the <a>defaultRule</a>.
generation :: World -> World

-- | <tt>generation rule world</tt> calculates the next generation of
--   <tt>world</tt>, using <tt>rule</tt>.
generationWithRule :: Rule -> World -> World

-- | Specifies a rule to determine the fate of a cell.
type Rule = (Life -> Int -> Life)

-- | <tt>mkRule survive birth</tt> returns a new rule, where
--   <tt>survive</tt> and <tt>birth</tt> specify cell counts for survival
--   and birth of a cell:
--   
--   <pre>
--   mkRule [2,3] [3] == conwayRule
--   </pre>
mkRule :: [Int] -> [Int] -> Rule

-- | Default rule used by <a>generation</a>. Same as <a>conwayRule</a>.
defaultRule :: Rule

-- | Conway's rule (23/3): A cell is born from 3 living cells. A cell only
--   stays alive with 2 or 3 alive neighbours.
conwayRule :: Rule

-- | Copy world (1357/1357)
rule1357 :: Rule

-- | String representation of cells.
data LifeSign
LifeSign :: String -> String -> LifeSign
[symDead] :: LifeSign -> String
[symAlive] :: LifeSign -> String

-- | Default representation: <tt>Dead: " ", Alive: "â€¢"</tt>.
defaultLifeSign :: LifeSign

-- | Displays a grid of cells using <a>defaultLifeSign</a>.
showWorld :: World -> String

-- | <tt>showWorld w repr</tt> shows a grid of cells using a
--   <a>LifeSign</a> <tt>repr</tt> as symbols for dead/alive cells.
showWorldUsing :: LifeSign -> World -> String
instance GHC.Show.Show Life.LifeSign
instance GHC.Show.Show Life.Life
instance GHC.Classes.Eq Life.Life
